
@{
    ViewData["Title"] = "Carros";
    Layout = "~/Views/Shared/_head_foot.cshtml";
}

<!-- partial -->
<div class="main-panel">
    <div class="content-wrapper">
        <div class="form-group">
            <div class="input-group">
                <input id="carId" type="text" class="form-control" placeholder="Descargar por ID" aria-label="Descargar por ID" aria-describedby="basic-addon2" required>
                <div class="input-group-append">
                    <button id="downloadCarByIdBtn" class="btn btn-sm btn-primary" type="button">Descargar detalles de carro</button>
                </div>

            </div>
            <button id="downloadCarsBtn" class="btn btn-sm btn-primary" type="button">Descargar todos los carros</button>

        </div>
        <h1>Buscar Carro por ID</h1>
        <input id="carIdFront" type="text" class="form-control" placeholder="Buscar por ID" aria-label="Buscar por ID" aria-describedby="basic-addon2" required>
        <button id="buscarBtn" class="btn btn-sm btn-primary" type="button">Buscar</button>

        <div id="result"></div>

    </div>

</div>
<script>

    document.getElementById('downloadCarsBtn').addEventListener('click', async function () {
        try {
            // Realiza la solicitud GET al endpoint que devuelve el PDF
            const response = await fetch('https://localhost:7277/api/Car/pdf', {
                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('Error al descargar el PDF.');
            }

            // Convierte la respuesta a un Blob (que representa el archivo binario del PDF)
            const blob = await response.blob();

            // Crea una URL temporal en el navegador para descargar el archivo
            const url = window.URL.createObjectURL(blob);

            // Crea un elemento <a> temporal para "simular" la descarga del archivo
            const a = document.createElement('a');
            a.href = url;
            a.download = 'ListadoCarros.pdf'; // Nombre por defecto del archivo al descargar
            document.body.appendChild(a);
            a.click();

            // Limpia los elementos temporales
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Ocurrió un error al descargar el PDF:', error);
            alert('No se pudo descargar el PDF. Revisa la consola para más detalles.');
        }
    });

    document.getElementById('downloadCarByIdBtn').addEventListener('click', async function () {

        const input = document.getElementById('carId');
        const carId = input.value;

        try {
            const response = await fetch(`https://localhost:7277/api/Car/${carId}/pdf`, {

                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('Error al descargar el PDF.');
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `Orden_${carId}.pdf`;
            document.body.appendChild(a);
            a.click();

            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Ocurrió un error al descargar el PDF:', error);
            alert(`No se encontro el carro numero: ${carId}`);
        }
    });
    document.getElementById('buscarBtn').addEventListener('click', async function () {
        const carId = document.getElementById('carIdFront').value.trim();
        if (!carId) {
            alert("Por favor, ingrese un ID válido.");
            return;
        }

        try {
            // Reemplaza esta URL con la ruta real de tu API
            const response = await fetch(`https://localhost:7277/api/Car/${carId}`, {
                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('No se encontró un carro con ese ID.');
            }

            const data = await response.json();

            // Limpiamos el contenedor antes de mostrar los nuevos datos
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '';

            // Renderizamos la información de la orden
            const orderInfo = document.createElement('div');
            orderInfo.innerHTML = `
                        <h2>Detalles de el carro</h2>
                        <p><strong>ID:</strong> ${data.id}</p>
                        <p><strong>Modelo:</strong> ${data.model}</p>
                        <p><strong>Año:</strong> ${data.year}</p>
                      
                    `;
            resultDiv.appendChild(orderInfo);

            // Renderizamos las facturas asociadas a la orden
            const carDetails = data.carDetails?.$values || [];
            if (carDetails.length > 0) {
                const carTitle = document.createElement('h3');
                carTitle.textContent = 'Detalles del carro:';
                resultDiv.appendChild(carTitle);

                const carList = document.createElement('ul');

                carDetails.forEach(car => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                                    <p><strong>Transmision:</strong> ${car.transmissionType}</p>
                                    <p><strong>Color:</strong> ${car.color}</p>
                                <p><strong>Stock:</strong> ${car.stock}</p>
                                <p><strong>Precio:</strong> ${car.price}</p>
                            `;
                    carList.appendChild(li);
                });

                resultDiv.appendChild(carList);
            } else {
                const noCar = document.createElement('p');
                noCar.textContent = 'No se encontraron carros.';
                resultDiv.appendChild(noCar);
            }

        } catch (error) {
            alert(error.message);
        }
    });
</script>
