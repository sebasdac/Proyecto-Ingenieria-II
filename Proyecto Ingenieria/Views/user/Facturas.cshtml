
@{
    ViewData["Title"] = "Facturas";
    Layout = "~/Views/Shared/_head_foot.cshtml";
}


<!-- partial -->
<div class="main-panel">
    <div class="content-wrapper">
        <div class="form-group">
            <div class="input-group">
                <input id="orderId" type="text" class="form-control" placeholder="Descargar por ID" aria-label="Buscar por ID" aria-describedby="basic-addon2" required>
                <div class="input-group-append">
                    <button id="downloadInvoiceByIdBtn" class="btn btn-sm btn-primary" type="button">Descargar orden</button>
                </div>
                
            </div>
            <button id="downloadInvoicesBtn" class="btn btn-sm btn-primary" type="button">Descargar todas las facturas</button>

        </div>
        <h1>Buscar Orden por ID</h1>
         <input id="orderIdFront" type="text" class="form-control" placeholder="Buscar por ID" aria-label="Buscar por ID" aria-describedby="basic-addon2" required>
        <button id="buscarBtn" class="btn btn-sm btn-primary" type="button">Buscar</button>

        <div id="result"></div>
        
    </div>
    
</div>


<script>

    document.getElementById('downloadInvoicesBtn').addEventListener('click', async function () {
        try {
            // Realiza la solicitud GET al endpoint que devuelve el PDF
            const response = await fetch('https://localhost:7277/api/OrdersPdf/GetOrdersPdf', {
                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('Error al descargar el PDF.');
            }

            // Convierte la respuesta a un Blob (que representa el archivo binario del PDF)
            const blob = await response.blob();

            // Crea una URL temporal en el navegador para descargar el archivo
            const url = window.URL.createObjectURL(blob);

            // Crea un elemento <a> temporal para "simular" la descarga del archivo
            const a = document.createElement('a');
            a.href = url;
            a.download = 'ListadoOrdenes.pdf'; // Nombre por defecto del archivo al descargar
            document.body.appendChild(a);
            a.click();

            // Limpia los elementos temporales
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Ocurrió un error al descargar el PDF:', error);
            alert('No se pudo descargar el PDF. Revisa la consola para más detalles.');
        }
    });

    document.getElementById('downloadInvoiceByIdBtn').addEventListener('click', async function () {

        const input = document.getElementById('orderId');
        const orderId = input.value;
        
        try {
            const response = await fetch(`https://localhost:7277/api/Order/GetOrderPdf/${orderId}`, {

                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('Error al descargar el PDF.');
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `Orden_${orderId}.pdf`;
            document.body.appendChild(a);
            a.click();

            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Ocurrió un error al descargar el PDF:', error);
            alert(`No se encontro la orden numero: ${orderId}`);
        }
    });
    document.getElementById('buscarBtn').addEventListener('click', async function () {
        const orderId = document.getElementById('orderIdFront').value.trim();
        if (!orderId) {
            alert("Por favor, ingrese un ID válido.");
            return;
        }

        try {
            // Reemplaza esta URL con la ruta real de tu API
            const response = await fetch(`https://localhost:7277/api/Order/${orderId}`, {
                method: 'GET'
            });

            if (!response.ok) {
                throw new Error('No se encontró una orden con ese ID.');
            }

            const data = await response.json();

            // Limpiamos el contenedor antes de mostrar los nuevos datos
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '';

            // Renderizamos la información de la orden
            const orderInfo = document.createElement('div');
            orderInfo.innerHTML = `
                    <h2>Detalles de la Orden</h2>
                    <p><strong>ID:</strong> ${data.id}</p>
                    <p><strong>Número de Orden:</strong> ${data.orderNumber}</p>
                    <p><strong>Cliente:</strong> ${data.customerName}</p>
                    <p><strong>Modelo de Auto:</strong> ${data.carModel}</p>
                    <p><strong>Estado:</strong> ${data.orderStatus}</p>
                    <p><strong>Fecha:</strong> ${new Date(data.orderDate).toLocaleDateString()}</p>
                `;
            resultDiv.appendChild(orderInfo);

            // Renderizamos las facturas asociadas a la orden
            const invoices = data.invoices?.$values || [];
            if (invoices.length > 0) {
                const invoicesTitle = document.createElement('h3');
                invoicesTitle.textContent = 'Facturas de la Orden:';
                resultDiv.appendChild(invoicesTitle);

                const invoiceList = document.createElement('ul');

                invoices.forEach(invoice => {
                    const li = document.createElement('li');
                    li.innerHTML = `
                            <p><strong>ID de Factura:</strong> ${invoice.id}</p>
                            <p><strong>Fecha de Factura:</strong> ${new Date(invoice.invoiceDate).toLocaleDateString()}</p>
                            <p><strong>Monto Total:</strong> ${invoice.totalAmount}</p>
                            <p><strong>Estado:</strong> ${invoice.status}</p>
                        `;
                    invoiceList.appendChild(li);
                });

                resultDiv.appendChild(invoiceList);
            } else {
                const noInvoices = document.createElement('p');
                noInvoices.textContent = 'No se encontraron facturas para esta orden.';
                resultDiv.appendChild(noInvoices);
            }

        } catch (error) {
            alert(error.message);
        }
    });
</script>





<script src="~/template/assets/vendors/chart.js/Chart.min.js"></script>
<script src="~/template/assets/vendors/js/vendor.bundle.base.js"></script>
<!-- endinject -->
<!-- Plugin js for this page -->
<script src="~/template/assets/vendors/chart.js/Chart.min.js"></script>
<!-- End plugin js for this page -->
<!-- inject:js -->
<script src="~/template/assets/js/off-canvas.js"></script>
<script src="~/template/assets/js/hoverable-collapse.js"></script>
<script src="~/template/assets/js/misc.js"></script>
<script src="~/template/assets/js/settings.js"></script>
<script src="~/template/assets/js/todolist.js"></script>
<!-- endinject -->
<!-- Custom js for this page -->
<script src="~/template/assets/js/chart.js"></script>
<!-- End custom js for this page -->
